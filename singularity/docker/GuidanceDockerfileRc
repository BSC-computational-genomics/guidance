#FROM compss/compss-ubuntu16:stable
FROM ubuntu:16.04

# Install Essentials
RUN apt-get update && \
# Install Packages
    apt-get install -y --no-install-recommends \
    git  \
    vim \
    wget \
    openssh-server \
    sudo && \
# Enable ssh to localhost for user root & jenkins
    yes yes | ssh-keygen -f /root/.ssh/id_rsa -t rsa -N '' > /dev/null && \
    cat /root/.ssh/id_rsa.pub > /root/.ssh/authorized_keys && \
# Enable repo compression
    git config --global core.compression 9 && \
# Build dependencies
    apt-get install -y --no-install-recommends maven \
# Runtime dependencies
    openjdk-8-jdk graphviz xdg-utils \
# Bindings-common-dependencies
    libtool automake build-essential \
# C-binding dependencies
    libboost-all-dev libxml2-dev csh \
# Extrae dependencies
    libxml2 gfortran libpapi-dev papi-tools \
# Misc. dependencies
    openmpi-bin openmpi-doc libopenmpi-dev uuid-runtime curl bc \
# Python-binding dependencies
    python-dev python3-dev libpython2.7 python-pip python3-pip python-setuptools python3-setuptools && \
    pip2 install wheel numpy==1.15.4 dill guppy decorator mpi4py==1.3.1 && \
    pip3 install wheel numpy==1.15.4 dill decorator mpi4py==3.0.1 && \
# Python-redis dependencies
    pip2 install redis==2.10.6 redis-py-cluster && \
    pip3 install redis==2.10.6 redis-py-cluster && \
# AutoParallel dependencies
    apt-get install -y --no-install-recommends libgmp3-dev flex bison libbison-dev texinfo libffi-dev && \
    pip2 install astor sympy enum34 islpy && \
# Configure user environment
# =============================================================================
# System configuration
# =============================================================================
# Add environment variables
    echo "JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/" >> /etc/environment && \
    echo "MPI_HOME=/usr/lib/openmpi" >> /etc/environment && \
    echo "LD_LIBRARY_PATH=/usr/lib/openmpi/lib" >> /etc/environment && \
    mkdir /run/sshd && \
    rm -rf /var/lib/apt/lists/* && \
    git clone --branch "${compss_version}" https://github.com/bsc-wdc/compss.git COMPSs && \
    cd COMPSs && \
    ./submodules_get.sh && \
    ./submodules_patch.sh && \
    sudo -E /framework/builders/buildlocal -P /opt/COMPSs && \
    cd .. && \
    rm -rf COMPSs

#Copy binaries into the container
RUN mkdir /TOOLS
COPY ./TOOLS/shapeit.v2.r727.linux.x64 /TOOLS/shapeit.v2.r727.linux.x64
COPY ./TOOLS/R_scripts /TOOLS/R_scripts

WORKDIR /TOOLS

RUN sudo apt-get update && sudo apt-get install -y apt-utils

#Install R
RUN sudo apt-get update && \
    sudo apt-get install -y r-base

######### IN CASE WE WANT TO UPGRADE QCTOOL #########

#Install mercurial (for QCTool)
#RUN sudo apt-get install -y mercurial

#Install qctoolNew
#RUN hg clone -r ba5eaa4 https://gavinband@bitbucket.org/gavinband/qctool qctool_2.0 && \
#    cd qctool_2.0 && \
#    ./waf-1.5.18 configure && \
#    ./waf-1.5.18 && \
#    sudo ln -s /TOOLS/build/release/qctool_v2.0.1 /usr/bin/qctool2.0

######### END OF QCTOOL INSTALACTION ################

#Install qctool
RUN wget http://www.well.ox.ac.uk/~gav/resources/archive/qctool_v1.4-linux-x86_64.tgz && \
    tar zxvf qctool_v1.4-linux-x86_64.tgz && \
    rm qctool_v1.4-linux-x86_64.tgz && \
    chmod -R 755 /TOOLS/qctool_v1.4-linux-x86_64/ && \
    ln -s /TOOLS/qctool_v1.4-linux-x86_64/qctool /usr/bin/qctool1.4

#bcftools and samtools dependencies
RUN sudo apt-get install -y zlib1g-dev libbz2-dev liblzma-dev

#Install bcftools
RUN wget https://github.com/samtools/bcftools/releases/download/1.8/bcftools-1.8.tar.bz2 -O bcftools.tar.bz2 && \
    tar -xjvf bcftools.tar.bz2 && \
    rm bcftools.tar.bz2 && \
    cd bcftools-1.8 && \
    make && \
    sudo make prefix=/usr/local/bin install && \
    sudo ln -s /usr/local/bin/bin/bcftools /usr/bin/bcftools

#Install samtools
RUN wget https://github.com/samtools/samtools/releases/download/1.5/samtools-1.5.tar.bz2 -O samtools.tar.bz2 && \
    tar -xjvf samtools.tar.bz2 && \
    rm samtools.tar.bz2 && \
    cd samtools-1.5 && \
    make && \
    sudo make prefix=/usr/local/bin install && \
    sudo ln -s /usr/local/bin/bin/samtools /usr/bin/samtools

#Plink dependencies
RUN sudo apt-get install -y libatlas-dev libblas-dev liblapack-dev libatlas-base-dev

#Install plink
RUN git clone https://github.com/chrchang/plink-ng.git && \
    cd plink-ng && \
    rm -r 2.0 && \
    cd 1.9 && \
    ./plink_first_compile && \
    sudo ln -s /TOOLS/plink-ng/1.9/plink /usr/bin/plink

#Install Eagle
RUN wget https://data.broadinstitute.org/alkesgroup/Eagle/downloads/old/Eagle_v2.3.tar.gz && \
    tar -zxvf Eagle_v2.3.tar.gz && \
    rm Eagle_v2.3.tar.gz && \
    rm -r Eagle_v2.3/example/ && \
    sudo ln -s /TOOLS/Eagle_v2.3/eagle /usr/bin/eagle

#Install Impute ### This step will stop working once they upgrade the program since only the last version is available
RUN wget https://mathgen.stats.ox.ac.uk/impute/impute_v2.3.2_x86_64_static.tgz && \
    tar -zxvf impute_v2.3.2_x86_64_static.tgz && \
    rm impute_v2.3.2_x86_64_static.tgz && \
    rm -r impute_v2.3.2_x86_64_static/Example/ && \
    sudo ln -s /TOOLS/impute_v2.3.2_x86_64_static/impute2 /usr/bin/impute2

#Install snptest
RUN wget http://www.well.ox.ac.uk/~gav/resources/archive/snptest_v2.5_linux_x86_64_static.tgz && \
    tar -zxvf snptest_v2.5_linux_x86_64_static.tgz && \
    rm snptest_v2.5_linux_x86_64_static.tgz && \
    rm -r snptest_v2.5_linux_x86_64_static/example/ && \
    chmod -R 755 /TOOLS/snptest_v2.5_linux_x86_64_static/ && \
    sudo ln -s /TOOLS/snptest_v2.5_linux_x86_64_static/snptest_v2.5 /usr/bin/snptest_v2.5

#Install minimac3
RUN git clone https://github.com/Santy-8128/Minimac3.git && \
    cd Minimac3 && \
    make && \
    sudo ln -s /TOOLS/Minimac3/bin/Minimac3 /usr/bin/minimac3

#Minimac4 dependencies
RUN sudo apt-get install -y cmake python-pip python-dev && \
    pip install cget 

#Install minimac4
RUN git clone https://github.com/Santy-8128/Minimac4.git && \
    cd Minimac4 && \
    bash install.sh && \
    sudo ln -s /TOOLS/Minimac4/release-build/minimac4 /usr/bin/minimac4
#    sudo ln -s /TOOLS/Minimac3/bin/Minimac3-omp /usr/bin/minimac3
#    sudo ln -s /TOOLS/Minimac3/bin/Minimac3 /usr/bin/minimac3

ENV LC_ALL "C"
#ENV PLINKBINARY "/TOOLS/plink_1.9/plink"
#ENV EAGLEBINARY "/TOOLS/Eagle_v2.3/eagle"
#ENV IMPUTE2BINARY "/TOOLS/impute_v2.3.2_x86_64_static/impute2"
#ENV QCTOOLBINARY "/TOOLS/qctool_v1.4-linux-x86_64/qctool
#ENV SNPTESTBINARY "/TOOLS/snptest_v2.5_linux_x86_64_static/snptest_v2.5"
#ENV MINIMACBINARY "/TOOLS/Minimac3/bin/Minimac3"
ENV RSCRIPTDIR "/TOOLS/R_scripts/"
ENV SHAPEITBINARY "/TOOLS/shapeit.v2.r727.linux.x64"
#ENV MINIMACBINARY "/TOOLS/Minimac3/bin/Minimac3"

ENV PLINKBINARY "/usr/bin/plink"
ENV QCTOOLBINARY "/usr/bin/qctool1.4"
ENV EAGLEBINARY "/usr/bin/eagle"
ENV IMPUTE2BINARY "/usr/bin/impute2"
ENV QCTOOLBINARY "/usr/bin/qctool1.4"
ENV SNPTESTBINARY "/usr/bin/snptest_v2.5"
ENV MINIMAC3BINARY "/usr/bin/minimac3"
ENV MINIMAC4BINARY "/usr/bin/minimac4"

ENV RSCRIPTBINDIR "/usr/bin/"

ENV BCFTOOLSBINARY "/usr/bin/bcftools"
#ENV QCTOOLSNEWBINARY "/gpfs/scratch/pr1ees00/pr1ees14/GCAT/SHAPEIT_IMPUTE/qctool/build/release/qctool_v2.0-rc9"
#ENV QCTOOLSNEWBINARY "/usr/bin/qctool2.0" ## THE INSTALLATION IS NOT PERFORMED BECAUSE THIS BINARY IS NOT USED IN THE CODE
ENV SAMTOOLSBINARY "/usr/bin/samtools"
